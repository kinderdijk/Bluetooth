#dim connected		# defines the connection status
dim bdaddr(6)		# local bluetooth device address
dim adv_data(13)
dim sr_data(20)
dim ascii(5)

dim send_data(2)
dim in_len
dim result
dim in(20)

dim pwm_1
dim pwm_2
dim pwm_3
dim pwm_4

# variables for getting the speed and direction.
dim phase_1 = 0
dim phase_2 = 0
dim phase_3 = 0
# 0 = forward, 1 = reverse
dim direction = 0
dim direction_count = 0
dim end_count = 0

# Variables for finding the values to the motor speed.
const slope = 10
const gimbal_slope = 16
dim pwm_speed
dim pwm_pitch
dim pwm_yaw
dim pwm_roll

const pwm_speed_channel = 1
const pwm_pitch_channel = 2
const pwm_yaw_channel = 3
const pwm_roll_channel = 4
const pwm_saftey_dutycycle = 0

dim battery_index
dim current_battery_value
dim battery_count
dim while_battery
dim battery_sum
const battery_list_size = 256
dim battery_list(battery_list_size)

# System boot event listener.
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
    connected = 0	# start initially unconnected.
    battery_index = 0
    battery_count = 0

    # Disable watermark events so no uart data is sent before a connection.
    # system_endpoint_uart1 is an enumeration for uart channel one.
    call system_endpoint_set_watermarks(system_endpoint_uart1, $00, $00)
	
    # Get the name of the bluetooth device.
    call system_address_get()(bdaddr(0:6))
	
    # -------------------------------
    # build custom advertisement data
    # -------------------------------
    
    # flags for discoverable/connectable
    adv_data(0:1) = $02 # ad field length = 2 bytes
    adv_data(1:1) = gap_ad_type_flags   # ad field type = 0x01 (Flags)
    adv_data(2:1) = $06 # flags = 0x06, connectable/undirected

    # tx power field advertisement, iOS apps may need this
    adv_data(3:1) = $02 # ad field length = 2 bytes
    adv_data(4:1) = gap_ad_type_txpower    # ad field type = 0x0A (TX Power)
    adv_data(5:1) = $03 # TX power in dBm
    # NOTE: TX power is a signed 8-bit value, and is not changed automatically
    # when using "hardware_set_txpower(<power>)". This may be anywhere from -23
    # to +3 based on your settings. Negative values may be converted to two's
    # complement form by adding 256, so for example -23 dBm would be 233 or $E9.
    
    # custom manufacturer
    adv_data(6:1) = $06 # ad field length = 5 bytes (arbitrary, maybe more or less but minimum 3)
    adv_data(7:1) = $ff # ad field type = 0xFF (Manufacturer Specific Data)
    adv_data(8:1) = $ff # unknown/prototype Company Identifier Code - octet 2 
    adv_data(9:1) = $ff # unknown/prototype Company Identifier Code - octet 1 
    adv_data(10:1) = $b1 # custom data byte #1 (can be anything)
    adv_data(11:1) = $b2 # custom data byte #2 (can be anything)
    adv_data(12:1) = $b3 # custom data byte #3 (can be anything)
    # NOTE: manufacturer data fields should contain the Company Identifier Code
    # in order to stay within BT 4.0 spec. You should also ideally obtain an
    # an official Company Identifier Code, but 0xFFFF is suitable for development.
    # (this is why the minimum ad field length for this is 3, so the CIC fits)

    # More bytes are possible here, but not necessary for this demo.
    # Compare with automatically generated ad packets from other
    # demo projects to see what else you might put here, or read
    # the relevant portions of the Bluetooth 4.0 Core Spec document
    # for greater detail.
    
    # -------------------------------
    # build custom scan response data
    # -------------------------------
	
    # Create the device name to include the mac address of the bluetooth device.
    sr_data(0:1) = $13  # ad field length = 19 bytes (0x13)
    sr_data(1:1) = gap_ad_type_localname_complete   # ad field type = 0x09 (Complete local name)
    sr_data(2:1) = $43  # 'C'
    sr_data(3:1) = $61  # 'a'
    sr_data(4:1) = $62  # 'b'
    sr_data(5:1) = $6c  # 'l'
    sr_data(6:1) = $65 # 'e'
    sr_data(7:1) = $20 # ' '
    sr_data(8:1) = $43 # 'C'
    sr_data(9:1) = $61 # 'a'
    sr_data(10:1) = $6d # 'm'
    sr_data(11:1) = $20  # ' '
    sr_data(12:1) = (bdaddr(3:1)/$10) + 48 + ((bdaddr(3:1)/$10)/10*7) 
    sr_data(13:1) = (bdaddr(3:1)&$f)  + 48 + ((bdaddr(3:1)&$f )/10*7) 
    sr_data(14:1) = (bdaddr(2:1)/$10) + 48 + ((bdaddr(2:1)/$10)/10*7) 
    sr_data(15:1) = (bdaddr(2:1)&$f)  + 48 + ((bdaddr(2:1)&$f )/10*7) 
    sr_data(16:1) = (bdaddr(1:1)/$10) + 48 + ((bdaddr(1:1)/$10)/10*7) 
    sr_data(17:1) = (bdaddr(1:1)&$f)  + 48 + ((bdaddr(1:1)&$f )/10*7) 
    sr_data(18:1) = (bdaddr(0:1)/$10) + 48 + ((bdaddr(0:1)/$10)/10*7) 
    sr_data(19:1) = (bdaddr(0:1)&$f)  + 48 + ((bdaddr(0:1)&$f )/10*7) 
	
    # Write the device name to the gatt file.
    call attributes_write(xgatt_device_name, 0, 18, sr_data(2:18))
	
    # Set the advertising parameters. 7 means using all 3 advertising channels. 0x07
    call gap_set_adv_parameters(500, 600, 7)
	
    # Set the custom advertising data.
    call gap_set_adv_data(0, 13, adv_data(0:13))
	
    # Set the custom response data
    call gap_set_adv_data(1,20, sr_data(0:20))
	
    # put module into discoverable/connectable mode (with user-defined advertisement data)
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
	
    # Timer is set to 2MHz. 2MHz/40000 = 50Hz. This is the baseline frequency of the pwm.
    call hardware_timer_comparator(1,0,6,40000)

    # Set a repeating timer for the adc of the battery
    call hardware_set_soft_timer(280000, 0, 0)
end

event attributes_value(connection, reason, handle, offset, value_len, value_data)
    # Get the value into a form that is usable for PWM.
    # the duty cycle at 50Hz frequency should go from 5-10% (2000-4000).

    if handle=cbl_cable_cam_speed then
        pwm_speed = slope*value_data(0:1)+2000
        call hardware_timer_comparator(1,pwm_speed_channel,6,pwm_speed)
    end if

    if handle=cbl_gimbal_other then
        pwm_pitch = gimbal_slope*value_data(0:1)+2000
        pwm_yaw = gimbal_slope*value_data(1:1)+2000
        call hardware_timer_comparator(1,pwm_pitch_channel,6,pwm_pitch)
        call hardware_timer_comparator(1,pwm_yaw_channel,6,pwm_yaw)
    end if

    if handle=cbl_gimbal_roll then
        pwm_roll = slope*value_data(0:1)+2000
        call hardware_timer_comparator(1,pwm_roll_channel,6,pwm_roll)
    end if
	
    # Change the name of the device. This needs to be stored in persistent memory.
    # The result of the attempt to save is 0 if successful.
    if handle=custom_device_name then
        call attributes_write(xgatt_device_name, 0, 18, sr_data(2:18))
        call flash_ps_save($8000, value_len, value_data(0:value_len))
    end if
	
    # # Convert the pwm frequency to find a readable format.
    # pwm_1 = pwm/1000
    # pwm_2 = pwm/100 +(pwm_1*-10)
    # pwm_3 = pwm/10 + (pwm_1*-100) + (pwm_2*-10)
    # pwm_4 = pwm + (pwm_1*-1000) + (pwm_2*-100) + (pwm_3*-10)
	
    # ascii(0:1) = pwm_1+48
    # ascii(1:1) = pwm_2+48
    # ascii(2:1) = pwm_3+48
    # ascii(3:1) = pwm_4+48
    # ascii(4:1) = 46
	
    # #set the display to command mode
    # call hardware_io_port_write(0,$80,0)
    # # Change display cursor pos
    # call hardware_spi_transfer(0,1,"\xc6")
    # #set the display to data mode
    # call hardware_io_port_write(0,$80, $80)
    # #Write temperature to display
    # call hardware_spi_transfer(0,5,ascii(0:5))
    # #pull pin down to save power
    # call hardware_io_port_write(0,$80,0)
end

event hardware_soft_timer(handle)
    # forces a read of the adc pin P0_7, with a bit depth of 12, and a reference voltage of VDD
    call hardware_adc_read(7, 3, 2)
end

event hardware_adc_result(input, value)
    # get the values from P0_7 and convert them to readable percentages.
    current_battery_value = (value*1000)/9929

    # with R1=6.2k and R2=2.2k 12.6V->3.3V 9V->2.357V
    # 2k and 6.2k should be enough with 5% to be fine at the limits 12.6V->3.312V
    call attributes_write(cbl_battery_data, 0, 2, current_battery_value)
end

# Detect the interrupts on pins P0_0, P0_1, and P0_6. Interrupts are supported when pins are pulled high.
# They are set to low in the hardware.xml file.
event hardware_io_port_status(delta, port, irq, state)
    # if 1-2-3 then the motor is traveling forward.
    # if 1-3-2 then the motor is traveling backward.
    if port = 0 then
        if (irq & 1) = 1 then
            direction_count = direction_count + 1
            phase_1 = 0
            phase_2 = 0
            phase_3 = 0

            phase_1 = 1
        end if

        if (irq & 2) = 2 then
            phase_2 = 1
        end if
    end if

    if port = 1 then
        if (irq & 64) = 64 then
            if phase_2 = 0 then
                direction = 1
            else
                direction = 0
            end if

            phase_3 = 1
        end if
    end if
end

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
    connected = 1	
end

event connection_disconnected(connection, reason)
    # Put some logic in here about closing the connection.
    connected = 0
    
    # if the connection is lost, set the pwm duty cycle to stop the cart.
    call hardware_timer_comparator(1, pwm_speed_channel, 6, pwm_safety_dutycycle)

    # Start advertising again
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
end
